1. What is a functional interface in Java, and how is it different from a regular interface?

A functional interface in Java is an interface that contains only one abstract method,
 but it can have any number of default or static methods. 
 The key characteristic is that itâ€™s intended to represent a single functionality 
 and can be used with lambda expressions. 
In contrast, a regular interface can have multiple abstract methods, and prior to Java 8, 
all methods in an interface were abstract by default (except default and static methods introduced later).

Some examples of built-in functional interfaces in Java are:

Runnable
Supplier<T>
Consumer<T>
Function<T, R>
Predicate<T>

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

jshell

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

.stream
.filter
.map
.foreach
.reduce
.distinct
 number.stream().distinct().forEach(System.out::println)
.sorted
 number.stream().sorted().forEach(System.out::println)

Comparator
number.stream().sorted(Comparator.naturalOrder()).forEach(System.out::println)
number.stream().sorted(Comparator.reverseOrder()).forEach(System.out::println)
custom : 
 courses.stream().sorted(Comparator.comparing(a -> a.length())).forEach(System.out::println)
collector

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Predicate < predicate (boolean-valued function) of one argument >
 - filter
Function < accepts one argument and produces a result >
 - map
Consumer < operation that accepts a single input argument and returns no result >
 - forEach
 
 
 - is functional interface
 - has only one abstract method - this is function descriptor
 - other will be default or static
 
BinaryOperator : accept 2 input of same type and return single output of same type
 - reduce
 

UnaryOperator : accept 1 input of same type and return single output of same type
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Behavior of parameterization
- passing algorithm, strategy as a parameter
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Supplier 
- no  input - return something

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
BiFunction
BiPredicate
BiConsumer
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
MethodRefrences
- static method
- non static method
- constructor
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
allmatch
anymatch
nonmatch
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Comparator
sorted
comparing
thenComparing
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
limit() - if i want top 5 
skip() - skip top 3
keep 3 take next 5 - use in combo
takewhile() - return all elements until any element doesn't meet the criteria
dropwhile() - return all elements after any element meets the criteria
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
max
min >> optional
findFirst
findAny
sum >> can return
average ?? can return OptionalDouble
count
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Collectors.groupby
Collectors.counting
Collectors..maxBy
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Flatmap
Higher Order function - return method from a method
pee
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Easy to write performance code
we can parallelize program here easily

java execute the entire code until its terminal operation else its lazy (intermediate operation)
 - this improves performance
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
parallel
we dont do parallel in structure cause in structure we have lot of state there, like variable which keeps on changing
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

jshell> Arrays.stream(numberArray);
$6 ==> java.util.stream.IntPipeline$Head@2328c243

jshell> List<Integer> number = List.of(1,7,3,9,1,3,0,12,65,24);;
number ==> [1, 7, 3, 9, 1, 3, 0, 12, 65, 24]

jshell> number.stream()
$9 ==> java.util.stream.ReferencePipeline$Head@45283ce2

jshell> Stream.of(1, 7, 3, 9, 1, 3, 0, 12, 65, 24);
$10 ==> java.util.stream.ReferencePipeline$Head@7591083d

jshell> int[] numberArray = {1,3,51,12,876,23,53};
numberArray ==> int[7] { 1, 3, 51, 12, 876, 23, 53 }

jshell> Arrays.stream(numberArray);
$12 ==> java.util.stream.IntPipeline$Head@736e9adb

jshell> Arrays.stream(numberArray).sum();
$13 ==> 1019

jshell> Arrays.stream(numberArray).min();
$14 ==> OptionalInt[1]

jshell> Arrays.stream(numberArray).max();
$15 ==> OptionalInt[876]

